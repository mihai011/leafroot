---
version: '3.8'

services:

    api:
        build:
            context: .
            dockerfile: Dockerfile
            target: ${ENV}
            args:
                PYTHON_VERSION: ${PYTHON_VERSION}
        env_file:
            - ${ENV_FILE}
        container_name: api
        hostname: api
        restart: on-failure
        ports:
            - ${PORT}:${PORT}
        volumes:
            - .:/leafroot
        networks:
            - shared_network

    worker:
        build:
            context: .
            dockerfile: Dockerfile
            target: worker
            args:
                PYTHON_VERSION: ${PYTHON_VERSION}
        env_file:
            - ${ENV_FILE}
        container_name: worker
        hostname: worker
        restart: on-failure
        volumes:
            - .:/leafroot
        networks:
            - shared_network

    cassandradb:
        image: cassandra:4.1.0
        ports:
            - 127.0.0.1:9042:9042
        container_name: cassandradb
        hostname: ${CASSANDRADB_HOST}
        restart: on-failure
        environment:
            HEAP_NEWSIZE: 128M
            MAX_HEAP_SIZE: 1256M
        networks:
            - shared_network

    surrealdb:
        image: surrealdb/surrealdb
        container_name: ${SURREALDB_HOST}
        command: start --user ${SURREALDB_USER} --pass ${SURREALDB_PASS}
        networks:
            - shared_network

    scylladb:
        image: scylladb/scylla
        container_name: scylladb
        hostname: ${SCYLLADB_HOST}
        networks:
            - shared_network

    db:
        image: postgres:15
        container_name: db
        hostname: ${POSTGRES_HOST}
        env_file:
            - ${ENV_FILE}
        ports:
            - 127.0.0.1:5432:5432
        volumes:
            - postgres-data:/var/lib/postgresql/data
        healthcheck:
            test: [CMD, pg_isready, -U, airflow]
            interval: 10s
            retries: 5
            start_period: 5s
        networks:
            - shared_network

    db_backup:
        image: postgres:15
        container_name: db_backup
        hostname: ${POSTGRES_HOST_BACKUP}
        env_file:
            - ${ENV_FILE}
        ports:
            - 127.0.0.1:5433:5432
        volumes:
            - postgres-backup:/var/lib/postgresql/backup
        healthcheck:
            test: [CMD, pg_isready, -U, airflow]
            interval: 10s
            retries: 5
            start_period: 5s
        networks:
            - shared_network

    mongo:
        image: mongo:latest
        container_name: mongo
        hostname: ${MONGO_HOST}
        env_file:
            - ${ENV_FILE}
        ports:
            - 127.0.0.1:27017:27017
        volumes:
            - mongodb-data:/data/db
        networks:
            - shared_network

    redis:
        image: redis/redis-stack-server
        expose:
            - 6379
        container_name: redis
        env_file:
            - ${ENV_FILE}
        healthcheck:
            test: [CMD, redis-cli, ping]
            interval: 10s
            timeout: 30s
            retries: 50
            start_period: 30s
        hostname: ${REDIS_HOST}
        restart: always
        ports:
            - 127.0.0.1:6379:6379
        networks:
            - shared_network

    rabbitmq:
        build:
            context: .
            dockerfile: Dockerfile-rabbitmq
        image: rabbitmq:3-management
        container_name: rabbitmq
        hostname: ${RABBITMQ_HOST}
        env_file:
            - ${ENV_FILE}
        ports:
            - 5672:5672
            - 15672:15672
        networks:
            - shared_network

    pgadmin:
        image: dpage/pgadmin4
        container_name: pgadmin4_container
        restart: always
        environment:
            PGADMIN_DEFAULT_EMAIL: admin@admin.com
            PGADMIN_DEFAULT_PASSWORD: root
        depends_on:
            - db
        networks:
            - shared_network
        ports:
            - 5050:80

    minio:
        image: quay.io/minio/minio
        env_file:
            - ${ENV_FILE}
        container_name: minio
        hostname: ${MINIO_HOST}
        ports:
            - 127.0.0.1:9000:9000
            - 127.0.0.1:9001:9001
        command: server /data --console-address ":9001"
        environment:
            MINIO_ROOT_USER: ${MINIO_ROOT_USER}
            MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
        # volumes:
        #     - ./minio_data:/data
        networks:
            - shared_network


volumes:
    postgres-data:
    postgres-backup:
    pgadmin:
    mongodb-data:
    minio_data:


networks:
    shared_network:
        driver: bridge
